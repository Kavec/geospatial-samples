#!/usr/bin/env python
from __future__ import print_function

import argparse
import json
import os.path
import sys
import time
import aerospike
import tornado.ioloop
import tornado.web

from pprint import pprint
from aerospike.predicates import geo_within

g_outfile = None
g_args = None
g_client = None

class QueryHandler(tornado.web.RequestHandler):
    def post(self):
        global g_args
        global g_client
        valbin = "val"
        locbin = "loc"
        region = self.request.body
        query = g_client.query(g_args.nspace, g_args.set)
        query.where(geo_within(locbin, region))
        query.select(valbin)
        records = []
        def handle_record(tup):
            (key, metadata, record) = tup
            records.append(json.loads(record[valbin]))
        query.foreach(handle_record)
        self.write(json.dumps(records))

def server_do(cmd, fn, method, endpoint):
    try:
        fn()
    except Exception, e:
        print("{}: /{}, 500 INTERNAL SERVER ERROR".format(method.upper(), endpoint))
        print("EXCEPTION: {}".format(e))
        pprint(cmd)
        print("------------------------------")

class GeoReadHandler(tornado.web.RequestHandler):
    def post(self):
        global g_args
        global g_client
        cmd = json.loads(self.request.body)
        def fn():
            region = aerospike.GeoJSON(cmd['region'])
            query  = g_client.query(g_args.nspace, cmd['set'])
            query.where(geo_within(cmd['bin'], region.dumps()))
            query.select(cmd['bin'])
            records = []
            def handle_record(tup):
                (key, metadata, record) = tup
                records.append(record)
            query.foreach(handle_record)
            self.write(json.dumps(records))

        server_do(cmd, fn, "post", "georead")


class GeoWriteHandler(tornado.web.RequestHandler):
    def post(self):
        global g_args
        global g_client
        cmd = json.loads(self.request.body)
        def fn():
            key = (g_args.nspace, cmd['set'], cmd['key'])
            loc = aerospike.GeoJSON(cmd['val'])
            g_client.put(key,
                         { cmd['bin']: loc },
                         policy={ 'timeout': 10000, 'retry': 10 })
            self.write("");

        server_do(cmd, fn, "post", "geowrite")

    def delete(self):
        global g_args
        global g_client
        if not self.request.body:
            print("Received DELETE to /geowrite with no body.")
            self.write("")
            return
        cmd = json.loads(self.request.body)
        def fn():
            key = (g_args.nspace, cmd['set'], cmd['key'])
            loc = aerospike.GeoJSON(cmd['val'])
            g_client.remove(key, policy={ 'timeout': 10000, 'retry': 10 })
            self.write("");

        server_do(cmd, fn, "delete", "geowrite")

class HelpfulParser(argparse.ArgumentParser):
    """Prints usage when an error is encountered"""
    def error(self, message):
        sys.stderr.write('error: %s\n' % (message,))
        self.print_help()
        sys.exit(2)
    
def setup_aerospike():
    """Establish connection to server"""
    global g_args
    global g_client
    lua_sys_path = os.path.dirname(aerospike.__file__) \
                   + "/../../../aerospike/lua"
    config = {
        'hosts': [ (g_args.host, g_args.port), ],
        'lua': { 'user_path': ".",
                 'system_path': lua_sys_path }
    }
    g_client = aerospike.client(config)
    g_client.connect(g_args.user, g_args.passwd)
    return g_client

def cleanup_aerospike():
    """Gracefully shutdown the connection to the server"""
    global g_args
    global g_client
    g_client.close()

def process_args():
    parser = HelpfulParser(
        add_help=False,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-u', '--usage', action="help",
                        help="show this help message and exit")
    parser.add_argument('-h', '--host', metavar='HOST', type=str,
                        default='localhost', help='Server hostname')
    parser.add_argument('-p', '--port', metavar='PORT', type=int,
                        default='3000', help='Server port')
    parser.add_argument('-U', '--user', metavar='USER', type=str,
                        default=None, help='Username')
    parser.add_argument('-P', '--passwd', metavar='PW', type=str,
                        default=None, help='Password')
    parser.add_argument('-n', '--nspace', metavar='NS', type=str,
                        default='test', help='Namespace')
    parser.add_argument('-s', '--set', metavar='SET', type=str,
                        default='osm', help='Set name')
    parser.add_argument("-x", "--proxy-port", type=int, dest='proxy',
                        default=8888, metavar='X',
                        help="proxy listens on port")
    return parser.parse_args()
        
if __name__ == "__main__":
    g_args = process_args()
    
    g_outfile = sys.stdout

    g_client = setup_aerospike()

    app = tornado.web.Application([
        (r"/web/(.*)", tornado.web.StaticFileHandler, {"path": "./html/"}),
        (r"/query",    QueryHandler),
        (r"/georead",  GeoReadHandler),
        (r"/geowrite", GeoWriteHandler),
    ])
    app.listen(g_args.proxy)
    tornado.ioloop.IOLoop.current().start()
