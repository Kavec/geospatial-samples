#!/usr/bin/env node

// ----------------------------------------------------------------
// Copyright 2015 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------


var fs = require('fs');
var aerospike = require('aerospike');
var client = aerospike.client;
var yargs = require('yargs');
var events = require('events');
var util = require('util');
var readline = require('readline');

var Policy = aerospike.policy;
var Status = aerospike.status;
var filter = aerospike.filter;
var GeoJSON = aerospike.GeoJSON;

var locbin = "loc";
var valbin = "val";
var mapbin = "map";

var pending = 0;
var count = 0;
var readcmpl = false;

var t0;

function now() {
	tt = process.hrtime();
	return tt[0] + (tt[1] / 1e9);
}

// Options parsing

var argp = yargs
	.usage("$0 [options] <infile>")
	.options({
		usage: {
			alias: "u",
			boolean: true,
			describe: "Display this message"
		},
		host: {
			alias: "h",
			default: "localhost",
			describe: "Aerospike database host"
		},
		port: {
			alias: "p",
			default: 3000,
			describe: "Aerospike database port"
		},
		user: {
			alias: "U",
			default: null,
			describe: "Username to connect to secured cluster"
		},	
		password: {
			alias: "P",
			default: null,
			describe: "Password to connec to secured cluster"
		},
		namespace: {
			alias: "n",
			default: "test",
			describe: "Namespace for the keys"
		},
		set: {
			alias: "s",
			default: "yelp",
			describe: "Set for the location data"
		},
	});

var argv = argp.argv;

if (argv.help === true) {
	argp.showHelp();
	return;
}

if (argv._.length > 1) {
	console.error("extra positional arguments");
	argp.showHelp();
	return;
}
if (argv._.length < 1) {
	console.error("missing infile argument");
	argp.showHelp();
	return;
}
var infile = argv._[0];

var locndx = argv.set + "-loc-index";

// Configure the client.
config = {

	// the hosts to attempt to connect with.
	hosts: [
		{ addr: argv.host, port: argv.port }
	],
	
	//modlua userpath
	modlua: {
		userPath: __dirname
	},

	policies: {
        timeout: 10 * 1000
    }
};

if (argv.user !== null) {
	config.user = argv.user;
}

if (argv.password !== null) {
	config.password = argv.password;
}

function check_done() {
	// If there are puts outstanding we're not done.
	if (pending != 0)
		return;
	
	var t1 = now();
	process.stderr.write('\n');
	console.log("loaded " + count + " points in "
				+ (t1 - t0).toFixed(3) + " seconds");
	process.exit(0);
}

function insert_record(client, line) {
	++pending;
	var entry = JSON.parse(line);
	var locobj = { type: "Point",
				   coordinates: [entry['longitude'], entry['latitude']] }
	bins = {}
	bins[valbin] = line.trim();
	bins[locbin] = GeoJSON(JSON.stringify(locobj));
	bins[mapbin] = entry;
	var key = { ns: argv.namespace, set: argv.set, key: entry['business_id'] }
	client.put(key, bins, function(err, key) {
		if (err.code != Status.AEROSPIKE_OK) {
			console.error("insert_records: put failed: ", err.message);
			process.exit(1);
		}
		if (++count % 1000 == 0) {
			process.stderr.write('.');
		}
		--pending;
		if (readcmpl) {
			check_done();
		}
	});
}

function read_infile(client) {
	// Start the load timer.
	t0 = now();
	
	var rl = readline.createInterface({
		input: require('fs').createReadStream(infile),
		terminal: false
	});

	rl.on('line', function(line) {
		insert_record(client, line);
	});

	rl.on('close', function() {
		readcmpl = true;
		check_done();
	});
}

function create_index(client) {
    var options = {
        ns:  argv.namespace,
        set: argv.set,
        bin: locbin,
		index: locndx
    };
	client.createGeo2DSphereIndex(options, function(err) {
		if (err.code == Status.AEROSPIKE_OK) {
			read_infile(client)
		}
		else {
			console.log("index create failed: ", err);
			process.exit(1)
		}
	});
}

// Establish a connection to the cluster.
aerospike.client(config).connect(function (err, client) {

	if (err.code != Status.AEROSPIKE_OK) {
		console.error("Error: Aerospike server connection error. ", err.message);
		process.exit(1);
	}

	create_index(client);
});

// Local Variables:
// mode: javascript
// End:
