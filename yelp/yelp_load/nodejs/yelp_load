#!/usr/bin/env node

// ----------------------------------------------------------------
// Copyright 2015 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------


var fs = require('fs');
var aerospike = require('aerospike');
var client = aerospike.client;
var yargs = require('yargs');
var events = require('events');
var util = require('util');

var Policy = aerospike.policy;
var Status = aerospike.status;
var filter = aerospike.filter;

var locbin = "loc";
var valbin = "val";

function now() {
	tt = process.hrtime();
	return tt[0] + (tt[1] / 1e9);
}

// Options parsing

var argp = yargs
	.usage("$0 [options] -- <latitude> <longitude>")
	.options({
		help: {
			boolean: true,
			describe: "Display this message"
		},
		host: {
			alias: "h",
			default: "localhost",
			describe: "Aerospike database host"
		},
		port: {
			alias: "p",
			default: 3000,
			describe: "Aerospike database port"
		},
		user: {
			alias: "U",
			default: null,
			describe: "Username to connect to secured cluster"
		},	
		password: {
			alias: "P",
			default: null,
			describe: "Password to connec to secured cluster"
		},
		namespace: {
			alias: "n",
			default: "test",
			describe: "Namespace for the keys"
		},
		set: {
			alias: "s",
			default: "osm",
			describe: "Set for the location data"
		},
		radius: {
			alias: "r",
			default: 200.0,
			describe: "Query radius in meters"
		},
		amenity: {
			alias: "a",
			default: null,
			describe: "Fiter by amenity"
		}
	});

var argv = argp.argv;

if (argv.help === true) {
	argp.showHelp();
	return;
}

if (argv._.length > 2) {
	console.error("extra positional arguments");
	argp.showHelp();
	return;
}

if (argv._.length < 2) {
	console.error("missing <latitude> <longitude> pair");
	argp.showHelp();
	return;
}

var lat = parseFloat(argv._[0]);
var lng = parseFloat(argv._[1]);

// Local Variables:
// mode: javascript
// End:
