#!/usr/bin/env python

# ----------------------------------------------------------------
# Copyright 2015 Aerospike, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------

import argparse
import json
import sys
import time

import aerospike

VALBIN = "val"
LOCBIN = "loc"
MAPBIN = "map"
LOCNDX = "loc-index"

g_nlines = 0

def process_data_file(args, client):
    """Read data from input file and insert records"""
    global g_nlines
    for line in args.infile:
        entry = json.loads(line)
        locobj = { 'type': "Point",
                'coordinates': [ entry['longitude'], entry['latitude'] ] }
        key = (args.nspace, args.set, entry['business_id'])
        locval = aerospike.Geo(locobj)
        client.put(key, { VALBIN: line, LOCBIN: locval, MAPBIN: entry })
        g_nlines += 1
        if g_nlines % 1000 == 0:
            sys.stderr.write('.')
    sys.stderr.write('\n')

def setup_aerospike(args):
    """Establish connection to server"""
    config = { 'hosts': [ (args.host, args.port), ] }
    client = aerospike.client(config)
    client.connect(args.user, args.passwd)
    return client

def create_index(args, client):
    """Create the geospatial index on the server"""
    policy = {}
    client.index_2dsphere_create(args.nspace, args.set, LOCBIN, LOCNDX, policy)
    
def cleanup_aerospike(args, client):
    """Gracefully shutdown the connection to the server"""
    client.close()
    
def setup_parser():
    """Parse command line options"""
    parser = argparse.ArgumentParser(
        add_help=False,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('infile', type=argparse.FileType('r'),
                        help="input data file ('-' for stdin)")

    parser.add_argument('-u', '--usage', action="help",
                        help="show this help message and exit")
    parser.add_argument('-h', '--host', metavar='HOST', type=str,
                        default='localhost', help='Server hostname')
    parser.add_argument('-p', '--port', metavar='PORT', type=int,
                        default='3000', help='Server port')
    parser.add_argument('-U', '--user', metavar='USER', type=str,
                        default=None, help='Username')
    parser.add_argument('-P', '--passwd', metavar='PW', type=str,
                        default=None, help='Password')
    parser.add_argument('-n', '--nspace', metavar='NS', type=str,
                        default='test', help='Namespace')
    parser.add_argument('-s', '--set', metavar='SET', type=str,
                        default='yelp', help='Set name')
    return parser

if __name__ == '__main__':

    parser = setup_parser()
    args = parser.parse_args()

    client = setup_aerospike(args)
    create_index(args, client)

    t0 = time.time()
    process_data_file(args, client)
    t1 = time.time()

    cleanup_aerospike(args, client)

    print "loaded %d lines in %.3f seconds" % (g_nlines, t1 - t0)
